import { Parameter, Action, AnnotatedFunction, ToolDefinition } from '@copilotkit/shared';
import { CopilotKitServiceAdapter } from '../types/service-adapter.js';
import { RemoteChain } from '../types/langserve.js';
import { CopilotCloud } from './copilot-cloud.js';

interface CopilotRuntimeConstructorParams<T extends Parameter[] | [] = []> {
    actions?: Action<T>[];
    langserve?: RemoteChain[];
    debug?: boolean;
    copilotCloud?: CopilotCloud;
}
interface CopilotDeprecatedRuntimeConstructorParams<T extends Parameter[] | [] = []> {
    actions?: AnnotatedFunction<any>[];
    langserve?: RemoteChain[];
    debug?: boolean;
    copilotCloud?: CopilotCloud;
}
declare class CopilotRuntime<const T extends Parameter[] | [] = []> {
    private actions;
    private langserve;
    private debug;
    private copilotCloud;
    constructor(params?: CopilotRuntimeConstructorParams<T>);
    constructor(params?: CopilotDeprecatedRuntimeConstructorParams<T>);
    addAction<const T extends Parameter[] | [] = []>(action: Action<T>): void;
    /** @deprecated Use addAction with Action<T> instead. */
    addAction(action: AnnotatedFunction<any>): void;
    removeAction(actionName: string): void;
    removeBackendOnlyProps(forwardedProps: any): void;
    private getResponse;
    response(req: Request, serviceAdapter: CopilotKitServiceAdapter): Promise<Response>;
    streamHttpServerResponse(req: any, res: any, serviceAdapter: CopilotKitServiceAdapter, headers?: Record<string, string>): Promise<void>;
}
declare function flattenToolCallsNoDuplicates(toolsByPriority: ToolDefinition[]): ToolDefinition[];
/**
 * @deprecated use CopilotRuntime instead
 */
declare class CopilotBackend extends CopilotRuntime {
}

export { CopilotBackend, CopilotRuntime, flattenToolCallsNoDuplicates };
