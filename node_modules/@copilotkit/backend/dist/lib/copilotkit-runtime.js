"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lib/copilotkit-runtime.ts
var copilotkit_runtime_exports = {};
__export(copilotkit_runtime_exports, {
  CopilotBackend: () => CopilotBackend,
  CopilotRuntime: () => CopilotRuntime,
  flattenToolCallsNoDuplicates: () => flattenToolCallsNoDuplicates
});
module.exports = __toCommonJS(copilotkit_runtime_exports);
var import_shared4 = require("@copilotkit/shared");

// src/utils/openai.ts
var import_shared = require("@copilotkit/shared");
function writeChatCompletionChunk(controller, chunk) {
  const payload = new TextEncoder().encode("data: " + JSON.stringify(chunk) + "\n\n");
  controller.enqueue(payload);
}
function writeChatCompletionContent(controller, content = "", toolCalls) {
  const chunk = {
    choices: [
      {
        delta: {
          role: "assistant",
          content,
          ...toolCalls ? { tool_calls: toolCalls } : {}
        }
      }
    ]
  };
  writeChatCompletionChunk(controller, chunk);
}
function writeChatCompletionResult(controller, functionName, result) {
  let resultString = (0, import_shared.encodeResult)(result);
  const chunk = {
    choices: [
      {
        delta: {
          role: "function",
          content: resultString,
          name: functionName
        }
      }
    ]
  };
  writeChatCompletionChunk(controller, chunk);
}
function writeChatCompletionEnd(controller) {
  const payload = new TextEncoder().encode("data: [DONE]\n\n");
  controller.enqueue(payload);
}

// src/utils/stream.ts
var import_shared2 = require("@copilotkit/shared");
async function executeFunctionCall(controller, action, functionCallArguments) {
  var _a, _b, _c, _d, _e, _f;
  let args = [];
  if (functionCallArguments) {
    args = JSON.parse(functionCallArguments);
  }
  const result = await action.handler(args);
  if (result && typeof result === "string") {
    writeChatCompletionResult(controller, action.name, result);
  } else if (result && "content" in result && typeof result.content === "string") {
    writeChatCompletionContent(controller, result.content, (_a = result.additional_kwargs) == null ? void 0 : _a.tool_calls);
  } else if (result && "lc_kwargs" in result) {
    writeChatCompletionContent(controller, (_b = result.lc_kwargs) == null ? void 0 : _b.content, (_c = result.lc_kwargs) == null ? void 0 : _c.tool_calls);
  } else if (result && "getReader" in result) {
    let reader = result.getReader();
    while (true) {
      try {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        writeChatCompletionContent(
          controller,
          (_d = value == null ? void 0 : value.lc_kwargs) == null ? void 0 : _d.content,
          (_f = (_e = value.lc_kwargs) == null ? void 0 : _e.additional_kwargs) == null ? void 0 : _f.tool_calls
        );
      } catch (error) {
        console.error("Error reading from stream", error);
        break;
      }
    }
  } else {
    writeChatCompletionResult(controller, action.name, result);
  }
}
function copilotkitStreamInterceptor(stream, actions, debug = false) {
  const functionsByName = actions.reduce(
    (acc, fn) => {
      acc[fn.name] = fn;
      return acc;
    },
    {}
  );
  const decodedStream = (0, import_shared2.parseChatCompletion)(stream);
  const reader = decodedStream.getReader();
  async function cleanup(controller) {
    if (controller) {
      try {
        controller.close();
      } catch (_) {
      }
    }
    if (reader) {
      try {
        await reader.cancel();
      } catch (_) {
      }
    }
  }
  let executeThisFunctionCall = false;
  let functionCallName = "";
  let functionCallArguments = "";
  let currentFnIndex = null;
  const flushFunctionCall = async (controller) => {
    const action = functionsByName[functionCallName];
    await executeFunctionCall(controller, action, functionCallArguments);
    executeThisFunctionCall = false;
    functionCallName = "";
    functionCallArguments = "";
  };
  return new ReadableStream({
    async pull(controller) {
      var _a;
      while (true) {
        try {
          const { done, value } = await reader.read();
          if (done) {
            if (debug) {
              console.log("data: [DONE]\n\n");
            }
            if (executeThisFunctionCall) {
              await flushFunctionCall(controller);
            }
            writeChatCompletionEnd(controller);
            await cleanup(controller);
            return;
          }
          if (debug) {
            console.log("data: " + JSON.stringify(value) + "\n\n");
          }
          let mode;
          const maybeToolCall = (_a = value.choices[0].delta.tool_calls) == null ? void 0 : _a[0];
          if (maybeToolCall) {
            mode = { type: "function", toolCall: maybeToolCall };
          } else {
            mode = { type: "message" };
          }
          const nextChunkIndex = mode.type === "function" ? mode.toolCall.index : null;
          if (executeThisFunctionCall && (mode.type != "function" || nextChunkIndex != currentFnIndex)) {
            await flushFunctionCall(controller);
          }
          currentFnIndex = nextChunkIndex;
          if (mode.type === "message") {
            if (value.choices[0].delta.content) {
              writeChatCompletionChunk(controller, value);
            }
            continue;
          } else if (mode.type === "function") {
            const maybeFunctionName = mode.toolCall.function.name;
            if (maybeFunctionName) {
              functionCallName = maybeFunctionName;
            }
            const maybeArguments = mode.toolCall.function.arguments;
            if (mode.toolCall.function.arguments) {
              functionCallArguments += maybeArguments;
            }
            if (!executeThisFunctionCall) {
              if (functionCallName in functionsByName) {
                executeThisFunctionCall = true;
              }
            }
            mode.toolCall.function.scope = executeThisFunctionCall ? "server" : "client";
            writeChatCompletionChunk(controller, value);
            continue;
          }
        } catch (error) {
          controller.error(error);
          return;
        }
      }
    },
    cancel() {
      reader.cancel();
    }
  });
}
var SingleChunkReadableStream = class extends ReadableStream {
  constructor(content = "", toolCalls) {
    super({
      start(controller) {
        const chunk = {
          choices: [
            {
              delta: {
                role: "assistant",
                content,
                ...toolCalls ? { tool_calls: toolCalls } : {}
              }
            }
          ]
        };
        writeChatCompletionChunk(controller, chunk);
        writeChatCompletionEnd(controller);
        controller.close();
      },
      cancel() {
      }
    });
  }
};

// src/utils/langserve.ts
var import_remote = require("langchain/runnables/remote");
async function remoteChainToAction(chain) {
  chain = { ...chain };
  const runnable = new import_remote.RemoteRunnable({ url: chain.chainUrl });
  if (!chain.parameters) {
    chain = await inferLangServeParameters(chain);
  }
  chain.parameterType || (chain.parameterType = "multi");
  return {
    name: chain.name,
    description: chain.description,
    parameters: chain.parameters,
    handler: async (args) => {
      let input;
      if (chain.parameterType === "single") {
        input = args[Object.keys(args)[0]];
      } else {
        input = args;
      }
      return await runnable.invoke(input);
    }
  };
}
async function inferLangServeParameters(chain) {
  chain = { ...chain };
  const supportedTypes = ["string", "number", "boolean"];
  let schemaUrl = chain.chainUrl.replace(/\/+$/, "") + "/input_schema";
  let schema = await fetch(schemaUrl).then((res) => res.json()).catch(() => {
    throw new Error("Failed to fetch langserve schema at " + schemaUrl);
  });
  if (supportedTypes.includes(schema.type)) {
    chain.parameterType = "single";
    chain.parameters = [
      {
        name: "input",
        type: schema.type,
        description: "The input to the chain"
      }
    ];
  } else if (schema.type === "object") {
    chain.parameterType = "multi";
    chain.parameters = Object.keys(schema.properties).map((key) => {
      var _a;
      let property = schema.properties[key];
      if (!supportedTypes.includes(property.type)) {
        throw new Error("Unsupported schema type");
      }
      return {
        name: key,
        type: property.type,
        description: property.description || "",
        required: ((_a = schema.required) == null ? void 0 : _a.includes(key)) || false
      };
    });
  } else {
    throw new Error("Unsupported schema type");
  }
  return chain;
}

// src/lib/copilot-cloud.ts
var import_shared3 = require("@copilotkit/shared");
var CopilotCloud = class {
};
var RemoteCopilotCloud = class extends CopilotCloud {
  constructor(cloudApiUrl = import_shared3.COPILOT_CLOUD_API_URL) {
    super();
    this.cloudApiUrl = cloudApiUrl;
  }
  async checkGuardrailsInput({
    cloud,
    publicApiKey,
    messages
  }) {
    const url = `${this.cloudApiUrl}/${import_shared3.COPILOT_CLOUD_VERSION}/copilotkit/guardrails/input`;
    const response = await fetch(url, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        [import_shared3.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER]: publicApiKey
      },
      body: JSON.stringify({ messages, cloud })
    });
    if (!response.ok) {
      let message = response.statusText;
      try {
        const json2 = await response.json();
        if (json2.message) {
          message = json2.message;
        }
      } catch (error) {
      }
      throw new Error("Failed to check input guardrails: " + message);
    }
    const json = await response.json();
    return { status: json.status, reason: json.reason };
  }
};

// src/lib/copilotkit-runtime.ts
var CopilotRuntime = class {
  constructor(params) {
    this.actions = [];
    this.langserve = [];
    this.debug = false;
    for (const action of (params == null ? void 0 : params.actions) || []) {
      if ("argumentAnnotations" in action) {
        this.actions.push((0, import_shared4.annotatedFunctionToAction)(action));
      } else {
        this.actions.push(action);
      }
    }
    for (const chain of (params == null ? void 0 : params.langserve) || []) {
      this.langserve.push(remoteChainToAction(chain));
    }
    this.debug = (params == null ? void 0 : params.debug) || false;
    this.copilotCloud = (params == null ? void 0 : params.copilotCloud) || new RemoteCopilotCloud();
  }
  addAction(action) {
    this.removeAction(action.name);
    if ("argumentAnnotations" in action) {
      this.actions.push((0, import_shared4.annotatedFunctionToAction)(action));
    } else {
      this.actions.push(action);
    }
  }
  removeAction(actionName) {
    this.actions = this.actions.filter((f) => f.name !== actionName);
  }
  removeBackendOnlyProps(forwardedProps) {
    const backendOnlyPropsKeys = forwardedProps[import_shared4.EXCLUDE_FROM_FORWARD_PROPS_KEYS];
    if (Array.isArray(backendOnlyPropsKeys)) {
      backendOnlyPropsKeys.forEach((key) => {
        const success2 = Reflect.deleteProperty(forwardedProps, key);
        if (!success2) {
          console.error(`Failed to delete property ${key}`);
        }
      });
      const success = Reflect.deleteProperty(forwardedProps, import_shared4.EXCLUDE_FROM_FORWARD_PROPS_KEYS);
      if (!success) {
        console.error(`Failed to delete EXCLUDE_FROM_FORWARD_PROPS_KEYS`);
      }
    } else if (backendOnlyPropsKeys) {
      console.error("backendOnlyPropsKeys is not an array");
    }
  }
  async getResponse(forwardedProps, serviceAdapter, publicApiKey) {
    this.removeBackendOnlyProps(forwardedProps);
    const cloud = forwardedProps.cloud;
    delete forwardedProps.cloud;
    const langserveFunctions = [];
    for (const chainPromise of this.langserve) {
      try {
        const chain = await chainPromise;
        langserveFunctions.push(chain);
      } catch (error) {
        console.error("Error loading langserve chain:", error);
      }
    }
    const serversideTools = [...this.actions, ...langserveFunctions];
    const mergedTools = flattenToolCallsNoDuplicates([
      ...serversideTools.map(import_shared4.actionToChatCompletionFunction),
      ...forwardedProps.tools || []
    ]);
    try {
      const result = await serviceAdapter.getResponse({
        ...forwardedProps,
        tools: mergedTools
      });
      if (publicApiKey !== void 0) {
        try {
          const checkGuardrailsInputResult = await this.copilotCloud.checkGuardrailsInput({
            cloud,
            publicApiKey,
            messages: forwardedProps.messages || []
          });
          if (checkGuardrailsInputResult.status === "denied") {
            return {
              stream: new SingleChunkReadableStream(checkGuardrailsInputResult.reason),
              headers: result.headers
            };
          }
        } catch (error) {
          console.error("Error checking guardrails:", error);
        }
      }
      const stream = copilotkitStreamInterceptor(result.stream, serversideTools, this.debug);
      return { stream, headers: result.headers };
    } catch (error) {
      console.error("Error getting response:", error);
      throw error;
    }
  }
  async response(req, serviceAdapter) {
    const publicApiKey = req.headers.get(import_shared4.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER) || void 0;
    try {
      const forwardedProps = await req.json();
      const response = await this.getResponse(forwardedProps, serviceAdapter, publicApiKey);
      return new Response(response.stream, { headers: response.headers });
    } catch (error) {
      return new Response(error, { status: error.status });
    }
  }
  async streamHttpServerResponse(req, res, serviceAdapter, headers) {
    const bodyParser = new Promise((resolve, reject) => {
      if ("body" in req) {
        resolve(req.body);
        return;
      }
      let body = "";
      req.on("data", (chunk) => body += chunk.toString());
      req.on("end", () => {
        try {
          resolve(JSON.parse(body));
        } catch (error) {
          reject(error);
        }
      });
    });
    const forwardedProps = await bodyParser;
    const publicApiKey = (req.header ? (
      // use header() in express
      req.header(import_shared4.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER)
    ) : (
      // use headers in node http
      req.headers[import_shared4.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER.toLowerCase()]
    )) || void 0;
    const response = await this.getResponse(forwardedProps, serviceAdapter, publicApiKey);
    const mergedHeaders = { ...headers, ...response.headers };
    res.writeHead(200, mergedHeaders);
    const stream = response.stream;
    const reader = stream.getReader();
    while (true) {
      const { done, value } = await reader.read();
      if (done) {
        res.end();
        break;
      } else {
        res.write(new TextDecoder().decode(value));
      }
    }
  }
};
function flattenToolCallsNoDuplicates(toolsByPriority) {
  let allTools = [];
  const allToolNames = [];
  for (const tool of toolsByPriority) {
    if (!allToolNames.includes(tool.function.name)) {
      allTools.push(tool);
      allToolNames.push(tool.function.name);
    }
  }
  return allTools;
}
var CopilotBackend = class extends CopilotRuntime {
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CopilotBackend,
  CopilotRuntime,
  flattenToolCallsNoDuplicates
});
//# sourceMappingURL=copilotkit-runtime.js.map